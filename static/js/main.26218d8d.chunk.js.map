{"version":3,"sources":["Helpers/constants.js","GameLogic/Ship.js","GameLogic/Gameboard.js","GameLogic/computerMoves.js","GameLogic/Player.js","GameLogic/Game.js","Components/GameOver.js","Components/PlayerBoard.js","Components/OpponentBoard.js","Components/Game.js","App.js","index.js"],"names":["gameStates","gameModes","possiblePositions","ships","fieldTypes","SIZE","Ship","length","position","coordinates","this","sunk","hits","createListOfHits","listOfHits","i","push","isSunk","newPosition","newCoordinates","Error","GameBoard","size","board","createBoard","adjacentFields","createAdjacentFields","sunkShip","row","j","allFields","coordinatesXY","x","y","coordinate","nextField","shipName","shipLength","nextX","nextY","nextCoord","deltaX","deltaY","currentX","currentY","checkFiledExist","checkField","name","checkNextCoordinates","checkShipPlacement","place","hit","placedShip","isHit","ship","hitShip","randomInt","num","Math","floor","random","computerMove","Player","nr","isComputer","checkMove","gameBoard","opponentBoard","number","makeMove","bind","placeShipRandom","possiblePosition","filedExist","opponentHit","opponentSunk","makeShipSunk","NewCoordinates","NewPosition","OldCoordinates","OldPosition","removeShip","placeShip","newBoard","shipsLength","shipPlaced","Game","gameMode","setMoveMade","setWinner","playRound","checkForGameOver","players","setPlayers","currentPlayer","gameOver","winner","1","2","playerNr","opponent","receiveAttack","opponentNr","Object","keys","thisPlayer","randomCoordinates","GameOver","props","content","className","onClick","startNewGame","PlayerBoard","useState","selectedShip","setSelectedShip","correctFields","setCorrectFields","playerBoard","player","playerShips","selectShip","moveShip","rotateShip","gameStatus","map","field","k","shipMoved","onMouseOver","prevCorrect","checkFiledPlacement","OpponentBoard","enemyClass","e","target","getAttribute","split","Number","data","opponentContent","opponentHeader","shipsMoved","setShipsMoved","game","useEffect","startButton","undefined","App","setGameStatus","moveMade","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26218d8d.chunk.js","sourcesContent":["const gameStates = {\n    PREPARING: 'preparing',\n    GAME_OVER: 'game over',\n    SHIP_PLACEMENT: 'ship placement',\n    GAME_RUNNING: 'game running'\n};\n\nconst gameModes = {\n    ONE_PLAYER: 'one player', \n    TWO_PLAYERS: 'two_players'\n};\n\nconst possiblePositions = {\n    VERTICAL: 'vertical',\n    HORIZONTAL: 'horizontal'\n};\n\nconst ships = {\n    'Carrier': 5, \n    'Battleship': 4, \n    'Destroyer': 3, \n    'Submarine': 3, \n    'Patrol Boat': 2\n};\n\nconst fieldTypes = {\n    SHIP: 'ship',\n    EMPTY: 'empty',\n    FIELD: 'field',\n    HIT: 'hit', \n    SUNK: 'sunk',\n    MISS: 'miss'\n};\n\nconst SIZE = 10;\n\nexport {gameModes, gameStates, possiblePositions, ships, SIZE, fieldTypes};\n","import {possiblePositions} from '../Helpers/constants';\n\nclass Ship {\n    constructor(length, position, coordinates) {\n        this.length = length; \n        this.sunk = false; \n        this.hits = this.createListOfHits();\n        this.position = position;\n        this.coordinates = coordinates;\n    }\n\n    createListOfHits() {\n        let listOfHits = [];\n        for (let i = 0; i < this.length; i++) {\n            listOfHits.push(null);\n        }\n        return listOfHits; \n    }\n\n    hit(position) {\n        if (this.hits[position] === 'hit') {\n            return;\n        }\n        this.hits[position] = 'hit';\n        this.isSunk();\n    }\n\n    isSunk() {\n        for (let square of this.hits) {\n            if (square === null) {\n                return this.sunk = false;\n            }\n        }\n        return this.sunk = true;\n    }\n\n    changeLocation(newPosition, newCoordinates) {\n        if (newPosition !== possiblePositions.VERTICAL || newPosition !== possiblePositions.HORIZONTAL) {\n            throw new Error ('Somthing went wrong! Wrong ship position');\n        }\n        this.position = newPosition;\n        this.coordinates = newCoordinates;\n    }\n}\n\nexport default Ship;","import Ship from './Ship';\n\nclass GameBoard {\n    constructor(size) {\n        this.board = this.createBoard(size);\n        this.adjacentFields = this.createAdjacentFields(); \n        this.ships = {};\n        this.sunkShip = 0;\n    }\n\n    createBoard(size) {\n        let board = [];\n        for (let i = 0; i < size; i ++) {\n            const row = [];\n            for (let j = 0; j < size; j ++) {\n                row.push(null);\n            }\n            board.push(row);\n        }\n        return board;\n    }\n    \n    createAdjacentFields() {\n        let allFields = []; \n        let coordinatesXY = [-1, 0, 1];\n        for (let x = 0; x < coordinatesXY.length; x++) {\n            for (let y = 0; y < coordinatesXY.length; y++) {\n                let coordinate = [coordinatesXY[x], coordinatesXY[y]];\n                allFields.push(coordinate);\n            }\n        }\n        return allFields;\n    }\n    \n    checkFiledExist(coordinates) {\n        const [x, y] = coordinates;\n        if (x < 0 || x >= this.board[0].length) {\n            return false;\n        } else if (y < 0 || y >=  this.board.length) {\n            return false;\n        } else {\n            return true;\n        }\n    }\n    \n    checkField(coordinates) {\n        const [x, y] = coordinates;\n        if (this.board[x][y] === null) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n    \n    checkNextCoordinates(position) {\n        let nextField;\n        if (position === 'horizontal') {\n            nextField = [1,0];\n        } else if (position === 'vertical') {\n            nextField = [0,1];\n        } else {\n            throw new Error('Wrong position!');\n        }\n        return nextField;\n    }\n\n    checkShipPlacement(shipName, shipLength, coordinates, nextField) {\n        const [nextX, nextY] = nextField;\n        const [x, y] = coordinates;\n        for (let i = 0; i < shipLength; i++) {\n            //checks that fields are available.\n            for (let nextCoord of this.adjacentFields) {\n                const [deltaX, deltaY] = nextCoord;\n                const currentX = x + (i * nextX) + deltaX;\n                const currentY = y + (i * nextY) + deltaY;\n                const filedExist = this.checkFiledExist([currentX, currentY], this.board);\n                if (filedExist) {\n                    const fieldChecked = this.checkField([currentX, currentY], this.board);\n                    if (!fieldChecked && this.board[currentX][currentY].name !== shipName) {\n                        return false;\n                    }\n                } else {\n                    if (deltaX === 0 && deltaY===0) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    placeShip(shipName, shipLength, coordinates, position) {\n        /*This function should take Ship component, \n        coordinates of the first element of ship, \n        and position (vertical or horizontal) as a arguments. \n        It's checks that the ship can be placed, \n        and if it can place the ship. */\n        const nextField = this.checkNextCoordinates(position);\n        const [x, y] = coordinates;\n        const shipCanBePlaced = this.checkShipPlacement(shipName, shipLength, coordinates, nextField);\n        if (shipCanBePlaced) {\n            for (let i = 0; i < shipLength; i++) {\n                const [nextX, nextY] = nextField;\n                const currentX = x + (i * nextX);\n                const currentY = y + (i * nextY);\n                this.board[currentX][currentY] = {\n                    name: shipName,\n                    place: i,\n                    hit: false\n                };\n            }\n            const placedShip = new Ship(shipLength, position, coordinates);\n            this.ships = {...this.ships, \n                [shipName]: placedShip\n            };\n            return true;\n        }\n        return false;\n    }\n\n    removeShip(shipName) {\n        const position = this.ships[shipName].position;\n        const [x, y] = this.ships[shipName].coordinates;\n        const shipLength = this.ships[shipName].length;\n        const nextField = this.checkNextCoordinates(position);\n        for (let i = 0; i < shipLength; i++) {\n            const [nextX, nextY] = nextField;\n            const currentX = x + (i * nextX);\n            const currentY = y + (i * nextY);\n            this.board[currentX][currentY] = null;\n            delete this.ships[shipName];\n        }\n    }\n\n    receiveAttack(coordinates) {\n        let isHit = false; \n        let isSunk = false;\n        const [x, y] = coordinates;\n        if (this.board[x][y] === null) {\n            this.board[x][y] = 'miss';\n        } else {\n            const ship = this.board[x][y];\n            ship.hit = true;\n            const hitShip = this.ships[ship.name];\n            hitShip.hit(ship.place);\n            isHit = true;\n            if (hitShip.sunk) {\n                isSunk = true;\n                this.sunkShip += 1;\n            }\n        }\n        return [isHit, isSunk];\n    }\n}\n\n\nexport default GameBoard;","import {possiblePositions} from '../Helpers/constants';\n\nfunction randomInt(num) {\n    return Math.floor(Math.random() * num);\n}\n\nfunction computerMove() {\n    const x = randomInt(10);\n    const y = randomInt(10);\n    return [ x, y ];\n}\n\nfunction randomPosition() {\n    let positions = [possiblePositions.VERTICAL, possiblePositions.HORIZONTAL];\n    return positions[randomInt(2)];\n}\n\nexport  {computerMove, randomPosition};","import GameBoard from './Gameboard';\n\nimport {computerMove, randomPosition} from './computerMoves';\n\nimport {fieldTypes} from '../Helpers/constants';\n\nclass Player {\n    constructor(nr, isComputer ,checkMove, size) {\n        this.gameBoard = new GameBoard(size);\n        this.opponentBoard = this.gameBoard.createBoard(size);\n        this.checkMove = checkMove;\n        this.number = nr;\n        this.isComputer = isComputer;\n        this.makeMove = this.makeMove.bind(this);\n        this.placeShipRandom = this.placeShipRandom.bind(this);\n    } \n\n    makeShipSunk(x, y) {\n        const possiblePosition = [[0,1], [0, -1], [1, 0], [-1, 0]];\n        for (let i= 0; i< possiblePosition.length; i++) {\n            let [deltaX, deltaY] = possiblePosition[i];\n            let nextX = x + deltaX;\n            let nextY = y + deltaY;\n            let filedExist = this.gameBoard.checkFiledExist([nextX, nextY]);\n            if(filedExist) {\n                while (filedExist && this.opponentBoard[nextX][nextY] === fieldTypes.HIT) {\n                    this.opponentBoard[nextX][nextY] = fieldTypes.SUNK;\n                    nextX += deltaX;\n                    nextY += deltaY;\n                    filedExist = this.gameBoard.checkFiledExist([nextX, nextY]);\n                }\n            }\n        }\n    }\n\n    makeMove(coordinates) {\n        const [x, y] = coordinates; \n        if (this.opponentBoard[x][y] === null) {\n            const [opponentHit, opponentSunk] = this.checkMove(coordinates, this.number);\n            if (opponentHit && !opponentSunk) {\n                this.opponentBoard[x][y] = fieldTypes.HIT;\n            }\n            else if (opponentHit  && opponentSunk) {\n                this.opponentBoard[x][y] = fieldTypes.SUNK;\n                this.makeShipSunk(x, y);\n            } else {\n                this.opponentBoard[x][y] = fieldTypes.MISS;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    moveShip(shipName, NewCoordinates, NewPosition) {\n        const OldCoordinates = this.gameBoard.ships[shipName].coordinates;\n        const OldPosition = this.gameBoard.ships[shipName].position;\n        const shipLength = this.gameBoard.ships[shipName].length;\n        this.gameBoard.removeShip(shipName, OldCoordinates, OldPosition);\n        const canShipBeMoved = this.gameBoard.placeShip(shipName, shipLength,  NewCoordinates, NewPosition);\n        if (!canShipBeMoved) {\n            this.gameBoard.placeShip(shipName, shipLength,  OldCoordinates, OldPosition);\n            return false;\n        }\n        return true;\n    }\n\n\n    placeShipRandom(size, ships) {\n        let newBoard = new GameBoard(size);\n        for (let shipName in ships) {\n            const shipsLength = ships[shipName];\n            let shipPlaced;\n            while (!shipPlaced) {\n                let coordinates = computerMove(); \n                let position = randomPosition();\n                shipPlaced = newBoard.placeShip(shipName, shipsLength, coordinates, position);\n            }\n        }\n        this.gameBoard = newBoard;\n    }\n}\n\nexport default Player;","import Player from './Player';\nimport {computerMove} from './computerMoves';\n\nimport {ships, SIZE} from '../Helpers/constants';\n\nclass Game {\n    constructor(gameMode, setMoveMade, setWinner) {\n        this.checkMove = this.checkMove.bind(this);\n        this.playRound = this.playRound.bind(this);\n        this.checkForGameOver = this.checkForGameOver.bind(this);\n        this.players = this.setPlayers(gameMode);\n        this.currentPlayer = 1;\n        this.gameOver = false;\n        this.ships = ships;\n        this.players[1].placeShipRandom(SIZE, this.ships);\n        this.players[2].placeShipRandom(SIZE, this.ships);\n        this.setMoveMade = setMoveMade;\n        this.setWinner = setWinner;\n        this.winner = 0;\n    }\n\n    setPlayers(gameMode) {\n        let players = {};\n        if (gameMode === 'one player') {\n            players = {\n                1: new Player(1, false, this.checkMove, SIZE),\n                2: new Player(2, true, this.checkMove, SIZE)\n            };\n        } else if (gameMode === 'two player') {\n            players = {\n                1: new Player(1, false ,this.checkMove, SIZE),\n                2: new Player(2, false ,this.checkMove, SIZE)\n            };\n        } else {\n            throw new Error('Wrong number of players!');\n        }\n        return players;\n\n    }\n\n    checkMove(coordinates, playerNr) {\n        let opponent;\n        if (playerNr === 1) {\n            opponent = this.players[2];\n        } else if (playerNr === 2){\n            opponent = this.players[1];\n        }    \n        else {\n            throw new Error ('Something is wrong! There should be only two players');\n        }\n        const [opponentHit, opponentSunk] = opponent.gameBoard.receiveAttack(coordinates);\n        return [opponentHit, opponentSunk];\n    }\n\n    checkForGameOver() {\n        const opponentNr = (this.currentPlayer === 1 ? 2 : 1);\n        const opponentBoard = this.players[opponentNr].gameBoard;\n        const shipsLength = Object.keys(opponentBoard.ships).length;\n        if (opponentBoard.sunkShip === shipsLength) {\n            this.gameOver = true;\n            this.setWinner(this.currentPlayer);\n        }\n    }\n\n    playRound(playerNr, coordinates) {\n        if (!this.gameOver) {\n            const thisPlayer = this.players[playerNr];\n            if (playerNr !== this.currentPlayer) {\n                return;\n            }\n            const moveMade = thisPlayer.makeMove(coordinates);\n            if(moveMade) {\n                this.checkForGameOver();\n                if ( this.currentPlayer === 1) {\n                    this.currentPlayer = 2;\n                } else {\n                    this.currentPlayer = 1;\n                }\n            }\n            if (this.players[this.currentPlayer].isComputer) {\n                const randomCoordinates = computerMove();\n                this.playRound(this.currentPlayer, randomCoordinates);\n            }\n            this.setMoveMade(true);\n        }\n    }\n}\n\nexport default Game;","import React from 'react';\n\nfunction GameOver(props) {\n    let content;\n    if (props.winner===1) {\n        content = 'You win! Congratulations!';\n    } else {\n        content = 'Computer wins! Try again!';\n    }\n\n    return (\n        <div className='o-popup'>\n            <div className = 'o-popup-overlay'></div>\n            <div className='newGame eightbit'>\n                <h2>Game over!</h2>\n                <h3>{content}</h3>\n                <div onClick={props.startNewGame} className='eightbit eightbit-btn'>Play again</div>\n            </div>\n        </div>\n    );\n}\n\nexport default GameOver;","import React, {useState} from 'react'; \n\nimport {gameStates, fieldTypes, possiblePositions} from '../Helpers/constants';\n\n\nfunction PlayerBoard(props) {\n    const [selectedShip, setSelectedShip] = useState('');\n    const [correctFields, setCorrectFields]  = useState([]);\n\n    const playerBoard = props.player.gameBoard.board;\n    const playerShips = props.player.gameBoard.ships;\n    let content;\n\n    const rotateShip = (shipName) => {\n        const coordinates = playerShips[shipName].coordinates;\n        const oldPosition = playerShips[shipName].position;\n        let newPosition; \n        if (oldPosition === possiblePositions.VERTICAL) {\n            newPosition = possiblePositions.HORIZONTAL;\n        } else {\n            newPosition = possiblePositions.VERTICAL;\n        }\n        props.player.moveShip(shipName, coordinates, newPosition);\n        setSelectedShip('');\n        setCorrectFields([]);\n    };\n\n    const selectShip = (shipName) => {\n        setSelectedShip(shipName);\n        if (shipName === selectedShip) {\n            rotateShip(shipName);\n        }\n    };\n\n    const moveShip = (coordinates) => {\n        if (selectedShip === '') {\n            setSelectedShip('');\n            return;\n        }\n        const position = playerShips[selectedShip].position;\n        props.player.moveShip(selectedShip, coordinates, position);\n        props.shipMoved(true);\n        setSelectedShip('');\n        setCorrectFields([]);\n    };\n\n    const checkFiledPlacement = (coordinates) => {\n        if (selectedShip === '') {\n            setSelectedShip('');\n            return;\n        }\n        setCorrectFields([]);\n        const shipLength = playerShips[selectedShip].length;\n        const position = playerShips[selectedShip].position;\n        const nextField =  props.player.gameBoard.checkNextCoordinates(position);\n        const canBePlaced = props.player.gameBoard.checkShipPlacement(selectedShip, shipLength, coordinates, nextField);\n        if (canBePlaced) {\n            setCorrectFields(prevCorrect => [...prevCorrect, coordinates]);\n            correctFields.push(coordinates);\n            let [nextX, nextY] = nextField;\n            let [x, y] = coordinates;\n            for (let i = 0; i < shipLength; i++) {\n                setCorrectFields(prevCorrect => [...prevCorrect, [x+nextX*i, y+nextY*i]]);\n            }\n        }\n    };\n\n    if (props.gameStatus !== gameStates.SHIP_PLACEMENT) {\n        content = playerBoard.map((row, i) => {\n            return row.map((field, j) => {\n                let className = fieldTypes.EMPTY;\n                if (field !== null) {\n                    if (field === fieldTypes.MISS) {\n                        className = fieldTypes.MISS;\n                    } else {\n                        if (field.hit) {\n                            if (playerShips[field.name].sunk) {\n                                className = fieldTypes.SUNK;\n                            } else {\n                                className = fieldTypes.HIT;\n                            }\n                        } else {\n                            className = fieldTypes.SHIP;\n                        }\n                    }\n                    return <div className={className} key={[i,j]}> </div>;\n                }\n                return <div className={className} key={[i,j]}> </div>;\n            });\n        });\n    }\n\n    else {\n        content = playerBoard.map((row, i) => {\n            return row.map((field, j) => {\n                let className = fieldTypes.FIELD;\n                if (field !== null) {\n                    className = fieldTypes.SHIP;\n                    if (field.name === selectedShip) {\n                        className = 'selected-ship';\n                    }\n                    return <div className={className} key={[i,j]} onClick={() => selectShip(field.name)}> </div>;\n                }\n                for (let k=0; k < correctFields.length; k++) {\n                    const [x, y] = correctFields[k];\n                    if (x === i && y === j) {\n                        className = 'correct';\n                    }\n                }\n                return <div \n                    className={className} \n                    key={[i,j]} \n                    onClick={() => moveShip([i,j])} \n                    onMouseOver={() => checkFiledPlacement([i,j])}> \n                </div>;\n            });\n        });\n    }\n    \n    return (\n        <div className ='playerBoard'>\n            {content}\n        </div>\n    );\n}\n\nexport default PlayerBoard;","import React from 'react'; \n\nimport {gameStates} from '../Helpers/constants';\n\nfunction OpponentBoard(props) {\n    const playerBoard = props.player.opponentBoard;\n    let enemyClass = 'enemy';\n\n    let onClick = (e) => {\n        const coordinates = e.target.getAttribute('data').split(',');\n        let [x, y] =  coordinates;\n        x = Number(x);\n        y = Number(y);\n        props.playRound(1, [x,y]);\n    };\n\n    if (props.gameStatus === gameStates.SHIP_PLACEMENT) {\n        onClick = null;\n        enemyClass = '';\n    }\n\n    const content = playerBoard.map((row, i) => {\n        return row.map((field, j) => {\n            let className = 'field';\n            if (field !== null) {\n                className = field;\n                return <div className={className} key={[i,j]}>  </div>;\n            }\n            return <div className={`${className} ${enemyClass}`} key={[i,j]} data={[i,j]} onClick = {onClick} />;\n        });\n    });\n    \n    return (\n        <div className ='playerBoard'>\n            {content}\n        </div>\n    );\n}\n\nexport default OpponentBoard;","import React, {useState, useEffect} from 'react'; \n\nimport PlayerBoard from './PlayerBoard';\nimport OpponentBoard from './OpponentBoard';\n\nimport {gameStates, SIZE, ships} from '../Helpers/constants';\n\nfunction Game(props) {\n    const [shipsMoved, setShipsMoved] = useState(false);\n\n    let opponentContent;\n    let opponentHeader;\n    let player = props.game.players[1];\n\n    useEffect(() => {\n        if (shipsMoved) {\n            setShipsMoved(false);\n        }\n    }, [shipsMoved]);\n\n    const newRandomPlacement = () => {\n        player.placeShipRandom(SIZE, ships);\n        setShipsMoved(true);\n    };\n    if (props.gameStatus ===  gameStates.SHIP_PLACEMENT) {\n        opponentHeader = 'Place your ship';\n        opponentContent = <div className='m-gameInfo'>\n            <p>Click on ship to select it. To rotate click on selected ship to move click on blank filed.<br/>\n            or click button for new random placement. </p>\n            <button className='eightbit eightbit-btn' onClick={newRandomPlacement}>Place random</button>\n            <p> When you are done click Start Game button to start.</p>\n            {props.startButton}\n        </div>;\n    } else {\n        opponentHeader = 'Computer board';\n        opponentContent = <OpponentBoard player={player} playRound={props.game.playRound}/>;\n    }\n\n    return (\n        <div>\n            <div className='preparation'>\n                <h2>Your board</h2>\n                <h2>{opponentHeader}</h2>\n                <PlayerBoard player={player} gameStatus={props.gameStatus} shipMoved = {setShipsMoved}/>\n                {opponentContent}\n            </div>\n        </div>\n    );\n}\n\nexport default Game;","import React, {useState, useEffect} from 'react';\n\nimport Game from './GameLogic/Game';\n\nimport GameOver from './Components/GameOver';\nimport GameRender from './Components/Game';\n\nimport {gameModes, gameStates} from './Helpers/constants';\n\nlet game = undefined;\n\nfunction App() {\n    const [gameStatus, setGameStatus] = useState(gameStates.PREPARING);\n    const [moveMade, setMoveMade] = useState(false);\n    const [winner, setWinner] = useState('');\n    //For future development of two players mode.\n    const [gameMode, setGameMode] = useState(gameModes.ONE_PLAYER);\n\n    useEffect(() => {\n        if (moveMade === true) {\n            setMoveMade(false);\n        }\n    }, [moveMade]); \n\n    useEffect(() => {\n        if (winner !== '') {\n            setGameStatus(gameStates.GAME_OVER);\n        }\n    }, [winner]);\n\n    const startNewGame = () => {\n        setGameStatus(gameStates.PREPARING);\n    };\n\n    const startButton = <button className='eightbit eightbit-btn' onClick={() => setGameStatus(gameStates.GAME_RUNNING)}>Start game</button>;\n\n    if (gameStatus === gameStates.PREPARING) {\n        game = new Game(gameMode, setMoveMade, setWinner);\n        setGameStatus(gameStates.SHIP_PLACEMENT);\n    }\n    \n    return (\n        <div>\n            <h1 className='title'>Battleships</h1>\n            <GameRender game = {game} gameStatus={gameStatus} startButton = {startButton}/>\n            {gameStatus === gameStates.GAME_OVER ? <GameOver startNewGame={startNewGame} winner={winner}/> : null}\n\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n"],"sourceRoot":""}